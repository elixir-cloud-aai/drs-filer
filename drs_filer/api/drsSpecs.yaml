swagger: '2.0'
basePath: '/ga4gh/drs/v1'
info:
  title: Data Repository Service
  version: 0.1.0
  description: 'https://github.com/ga4gh/data-repository-service-schemas'
  termsOfService: 'https://www.ga4gh.org/terms-and-conditions/'
  contact:
    name: GA4GH Cloud Work Stream
    email: ga4gh-cloud@ga4gh.org
  license:
    name: Apache 2.0
    url: 'https://raw.githubusercontent.com/ga4gh/data-repository-service-schemas/master/LICENSE'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
security:
  - {}
  - authToken: []
paths:

  '/objects/{object_id}':
    get:
      summary: Get info about a Data Object.
      description: >-
        Returns object metadata, and a list of access methods that can be used to fetch object bytes.
      operationId: getObject
      responses:
        '200':
          description: The Data Object was found successfully.
          schema:
            $ref: '#/definitions/Object'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The requested Data Object wasn't found
          schema:
            $ref: '#/definitions/Error'

        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
      tags:
        - DataRepositoryService
      x-swagger-router-controller: ga4gh.drs.server
  #   put:
  #     summary: Updates the existing DRS Object
  #     description: >-
  #       Updates the existing DRS endpoint
  #     operationId: UpdateObject
  #     responses:
  #       '200':
  #         description: The Data Object was updated successfully.
  #         schema:
  #           $ref: '#/definitions/Object'
  #       '400':
  #         description: The request is malformed.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '401':
  #         description: The request is unauthorized.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '403':
  #         description: The requester is not authorized to perform this action.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '404':
  #         description: The requested Data Object wasn't found
  #         schema:
  #           $ref: '#/definitions/Error'

  #       '500':
  #         description: An unexpected error occurred.
  #         schema:
  #           $ref: '#/definitions/Error'
  #     parameters:
  #       - name: object_id
  #         in: path
  #         required: true
  #         type: string
  #         description: An `id` of a Data Object
  #       - in: body
  #         name: Object
  #         description: The DrsObject info
  #         schema:
  #             $ref: '#/definitions/Object'
  #     tags:
  #       - DataRepositoryService
        
  #   delete:
  #     summary: Deletes the existing DRS Object
  #     description: >-
  #       Deletes the existing DRS endpoint
  #     operationId: DeleteObject
  #     responses:
  #       '200':
  #         description: The Data Object was deleted successfully.
  #         schema:
  #           $ref: '#/definitions/Object'
  #       '400':
  #         description: The request is malformed.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '401':
  #         description: The request is unauthorized.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '403':
  #         description: The requester is not authorized to perform this action.
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '404':
  #         description: The requested Data Object wasn't found
  #         schema:
  #           $ref: '#/definitions/Error'
  #       '500':
  #         description: An unexpected error occurred.
  #         schema:
  #           $ref: '#/definitions/Error'
  #     parameters:
  #       - name: object_id
  #         in: path
  #         required: true
  #         type: string
  #         description: An `id` of a Data Object
  #     tags:
  #       - DataRepositoryService

  '/objects/{object_id}/access/{access_id}':
    get:
      summary: Get a URL for fetching bytes. 
      description: >-
        Returns a URL that can be used to fetch the object bytes.


        This method only needs to be called when using an `AccessMethod` that contains an `access_id`
        (e.g., for servers that use signed URLs for fetching object bytes).
      operationId: getAccessURL
      responses:
        '200':
          description: The access URL was found successfully.
          schema:
            $ref: '#/definitions/AccessURL'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The requested access URL wasn't found
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: object_id
          in: path
          required: true
          type: string
          description: An `id` of a Data Object
        - name: access_id
          in: path
          required: true
          type: string
          description: An `access_id` from the `access_methods` list of a Data Object
      tags:
        - DataRepositoryService
      x-swagger-router-controller: ga4gh.drs.server
        
  '/objects':
    post:
      summary: Post info about a data object
      description: "Posts object metadata, and a list of access methods that can be used to fetch object bytes."
      operationId: registerObject
      responses:
        '200':
          description: The access URL was found successfully.
          schema:
            $ref: '#/definitions/AccessURL'
        '400':
          description: The request is malformed.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: The request is unauthorized.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: The requested access URL wasn't found
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: The requester is not authorized to perform this action.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: An unexpected error occurred.
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - in: body
          name: Object
          description: The DrsObject info
          schema:
              $ref: '#/definitions/Object'
      tags:
        - DataRepositoryService
      x-swagger-router-controller: ga4gh.drs.server

securityDefinitions:
  authToken:
    description: |
      A valid authorization token must be passed in the 'Authorization' header.
      Example syntax for using 'Authorization' header :
        Bearer: token_string
    type: apiKey
    name: Authorization
    in: header
definitions:
  Checksum:
    type: object
    required:
      - checksum
    properties:
      checksum:
        type: string
        description: 'The hex-string encoded checksum for the data'
      type:
        type: string
        description: |-
          The digest method used to create the checksum. If left unspecified md5
          will be assumed.

          possible values:
          md5               # most blob stores provide a checksum using this
          etag              # multipart uploads to blob stores
          sha256
          sha512

  ObjectList:
    type: array
    items:
      $ref: '#/definitions/Object'
  Object:
    type: object
    required: ['id', 'size', 'created', 'checksums', 'access_methods']
    properties:
      id:
        type: string
        description: |-
          An identifier unique to this Data Object.
      name:
        type: string
        description: |-
          A string that can be used to name a Data Object.
      size:
        type: integer
        format: int64
        description: |-
          The object size in bytes.
      created:
        type: string
        #format: date-time
        description: |-
          Timestamp of object creation in RFC3339.
      updated:
        type: string
        #format: date-time
        description: >-
          Timestamp of Object update in RFC3339, identical to create timestamp in systems
          that do not support updates.
      version:
        type: string
        description: |-
          A string representing a version.
      mime_type:
        type: string
        description: |-
          A string providing the mime-type of the Data Object.
        example:
          application/json
      checksums:
        type: array
        items:
          $ref: '#/definitions/Checksum'
        description: |-
          The checksum of the Data Object. At least one checksum must be provided.
      access_methods:
        type: array
        minItems: 1
        items:
          $ref: '#/definitions/AccessMethod'
        description: |-
          The list of access methods that can be used to fetch the Data Object.
      description:
        type: string
        description: |-
          A human readable description of the Data Object.
      aliases:
        type: array
        items:
          type: string
        description: >-
          A list of strings that can be used to find other metadata 
          about this Data Object from external metadata sources. These
          aliases can be used to represent the Data Object's secondary
          accession numbers or external GUIDs.
  AccessURL:
    type: object
    # required:
      # - url
    properties:
      url:
        type: string
        description: A fully resolvable URL that can be used to fetch the actual object bytes.
      headers:
        type: array
        items:
          type: string
        description: >-
          An optional list of headers to include in the HTTP request to `url`.
          These headers can be used to provide auth tokens required to fetch the object bytes.
        example:
          Authorization: Basic Z2E0Z2g6ZHJz
  AccessMethod:
    type: object
    required:
      - type
      - access_url
    properties:
      type:
        type: string
        enum:
        - s3
        - gs
        - ftp
        - gsiftp
        - globus
        - htsget
        - https
        - file
        description: >-
          Type of the access method.
      access_url:
        $ref: '#/definitions/AccessURL'
        description: >-
          An `AccessURL` that can be used to fetch the actual object bytes.
          Note that at least one of `access_url` and `access_id` must be provided.
      access_id:
        type: string
        description: >-
          An arbitrary string to be passed to the `/access` method to get an `AccessURL`.
          This string must be unique per object.
          Note that at least one of `access_url` and `access_id` must be provided.
      region:
        type: string
        description: >-
          Name of the region in the cloud service provider that the object belongs to.
        example:
          us-east-1
  Error:
    description:
      An object that can optionally include information about the error.
    type: object
    properties:
      msg:
        type: string
        description: A detailed error message.
      status_code:
        type: integer
        description: The integer representing the HTTP status code (e.g. 200, 404).
 